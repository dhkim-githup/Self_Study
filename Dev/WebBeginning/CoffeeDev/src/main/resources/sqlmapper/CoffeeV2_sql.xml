<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.example.coffeedev.v2.dao.CoffeeV2Dao">

    <!-- 전체조회 Coffee V2 List  [ List , Map ]
            <![CDATA[   ]]>   : xml 파싱에 관여하지 않도록 처리
    -->
    <select id="doCoffeeList" resultType="com.example.coffeedev.v2.vo.VoCoffeeV2">
        SELECT coffee_id, name, kind, price,
               DATE_FORMAT(reg_day,'%Y.%m.%d') AS reg_day, DATE_FORMAT(mod_day,'%Y.%m.%d') AS mod_day
        FROM coffee
        WHERE 1=1

          <!-- 등록기간 쿼리 -->
          <choose>
              <when test="strStart_date == null">
                  AND reg_day >= date_add(now(), INTERVAL-300 day)
              </when>
              <otherwise>
                      AND reg_day >= DATE_FORMAT( #{strStart_date},'%Y%m%d')
                      AND reg_day &lt;  date_add(DATE_FORMAT(#{strEnd_date},'%Y%m%d'), INTERVAL +1 DAY)
              </otherwise>
          </choose>

        <!-- 메뉴명 쿼리 , null , 빈값에 대한 처리 필요
            [MySQL]title like CONCAT('%',#{keyword},'%')
            [Oracle]title like '%' || #{keyword} || '%'
            [MSSQL]title like '%' + #{keyword} + '%'
        -->
        <if test="strName != null and strName != ''">
            AND name like CONCAT(#{strName},'%')
        </if>

        <!-- 종류 쿼리 -->
        <if test="strKind != null and strKind != 'ALL' ">
            AND kind = #{strKind}
        </if>
        ORDER BY coffee_id, kind, price
    </select>

    <!-- 1 row 조회  -->
    <select id="doListOne" resultType="map">
        SELECT coffee_id, name, kind, price,
               DATE_FORMAT(reg_day,'%Y.%m.%d') AS reg_day, DATE_FORMAT(mod_day,'%Y.%m.%d') AS mod_day
        FROM coffee
        WHERE coffee_id = CAST(#{strCoffee_id} as INTEGER)
    </select>

    <!-- 커피메뉴 등록하기 , 파라메터는 자동으로 인식됨 , 가격은 숫자로 변환 -->
    <insert id="doInsert">
        Insert into coffee(name, kind, price)
        Values (#{name},#{kind}, CAST(#{price} as INTEGER))
    </insert>

    <!-- 커피메뉴 등록하기 , 파라메터는 자동으로 인식됨 , 가격은 숫자로 변환 -->
    <insert id="doInsertLog">
        Insert into coffee_log(coffee_id,price)
        <foreach item="coffee_id" index="index" collection="chkList"  separator=" UNION ALL "  nullable="true">
           SELECT #{coffee_id}, CAST(#{strPrice} as INTEGER) FROM DUAL
        </foreach>
    </insert>



    <!-- 커피메뉴 수정하기 , 파라메터는 자동으로 인식됨 , 가격은 숫자로 변환 -->
    <insert id="doUpdate" >
        UPDATE coffee
        SET name=#{name}, kind=#{kind}, price=CAST(#{price} as INTEGER)
        WHERE coffee_id = CAST(#{coffee_id} as INTEGER)
    </insert>

    <!-- 커피메뉴 수정하기 , 파라메터는 자동으로 인식됨 , 가격은 숫자로 변환 -->
    <insert id="doUpdatePrice" >
        UPDATE coffee
        SET price=CAST(#{strPrice} as INTEGER)
        <where>
            <foreach item="coffee_id" index="index" collection="chkList" open="coffee_id in (" separator="," close=")" nullable="true">
                #{coffee_id}
            </foreach>
        </where>
<!--        WHERE 1=1-->
<!--            AND coffee_id in-->
<!--            <foreach item="coffee_id" index="index" collection="chkList" open="(" separator="," close=")" nullable="true">-->
<!--                    #{coffee_id}-->
<!--            </foreach>-->
    </insert>


    <!-- 커피메뉴 삭제 1 row -->
    <insert id="doDelete">
        Delete from  coffee
        WHERE coffee_id = CAST(#{strCoffee_id} as INTEGER)
    </insert>

    <!--- 한개값 입력 -->
    <insert id="doInsertLogOld">
    Insert into coffee_log(coffee_id,price)
    Values ( CAST(#{coffee_id} as INTEGER), CAST(#{strPrice} as INTEGER))
    </insert>

    <!--- 한개값 수정 -->
    <insert id="doUpdatePriceOld" >
        UPDATE coffee
        SET  price=CAST(#{strPrice} as INTEGER)
        WHERE coffee_id = CAST(#{coffee_id} as INTEGER)
    </insert>

    <!--  Commonlog 기록 -->
    <insert id="doInsertCommonLog">
        Insert into log(memo)
        Values ( #{strMemo})
    </insert>

</mapper>